# Hivenote Frontend CI
name: hivenote continuous integration frontend

permissions:
  id-token: write
  contents: read

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: eu-central-1
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USERNAME: ${{ secrets.REMOTE_USERNAME }}
  REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
  REMOTE_PRIVATE_KEY: ${{ secrets.REMOTE_PRIVATE_KEY }}
  VU_REMOTE_HOST: ${{ secrets.VU_REMOTE_HOST }}
  VU_REMOTE_USERNAME: ${{ secrets.VU_REMOTE_USERNAME }}
  VU_REMOTE_PORT: ${{ secrets.VU_REMOTE_PORT }}
  VU_REMOTE_PRIVATE_KEY: ${{ secrets.VU_REMOTE_PRIVATE_KEY }}

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Npm install
        run: npm ci

      - name: Run prettier
        run: npx prettier --check .

      - name: build
        run: |
          sh build.sh

  deploy_aws:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: publish docker image
        run: |
          sh publish.sh

      - name: Restart apps in AWS remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.REMOTE_HOST}}
          username: ${{env.REMOTE_USERNAME}}
          port: ${{env.REMOTE_PORT}}
          key: ${{env.REMOTE_PRIVATE_KEY}}
          script: |
            sh start.sh

  deploy_vu:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Check out source code
        uses: actions/checkout@v4
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      - name: build and publish opennebula image
        run: |
          sh publish-opennebula.sh

      - name: Rebuild and start docker containers in VU remote
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.VU_REMOTE_HOST}}
          username: ${{env.VU_REMOTE_USERNAME}}
          port: ${{env.VU_REMOTE_PORT}}
          key: ${{env.VU_REMOTE_PRIVATE_KEY}}
          script_stop: true
          script: |
            sh start.sh

            

    